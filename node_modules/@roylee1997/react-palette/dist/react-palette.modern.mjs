import e from"node-vibrant";import t from"lodash.camelcase";import r from"lodash.invoke";import a,{cloneElement as o}from"react";function n(){return n=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},n.apply(this,arguments)}async function c(a){const o=await e.from(a).getPalette();return Object.keys(o).reduce((e,a)=>n({},e,{[t(a)]:r(o,[a,"getHex"])}),{})}const l={loading:!0,data:{},error:void 0};function s(e,t){switch(t.type){case"getPalette":return l;case"resolvePalette":return n({},e,{data:t.payload,loading:!1});case"rejectPalette":return n({},e,{error:t.payload,loading:!1})}}function i(e){const[t,r]=a.useReducer(s,l);return a.useEffect(()=>{r({type:"getPalette"}),c(e).then(e=>{r({type:"resolvePalette",payload:e})}).catch(e=>{r({type:"rejectPalette",payload:e})})},[e]),t}const p=({src:e,children:t})=>{const r=i(e);return o(t,{palette:r})};export{p as Palette,p as default,c as getPalette,i as usePalette};
//# sourceMappingURL=react-palette.modern.mjs.map
